{{ $arch := .arch }}
{{ $branch := .branch }}
{{ $format := .format }}
{{ $imagename := .imagename }}
{{ $keep := .keep }}
{{ $mirror := .mirror }}
{{ $size := .size }}
{{ $variant := .variant }}
{{ $zip := .zip }}

{{ $desktop := .desktop }}
{{ $locale := .locale }}
{{ $password := .password }}
{{ $packages := .packages }}
{{ $timezone := .timezone }}
{{ $toolset := .toolset }}
{{ $username := .username }}

{{ $hostname := or .hostname "kali" }}

architecture: {{ $arch }}

actions:
  - action: debootstrap
    mirror: {{ $mirror }}
    suite: {{ $branch }}
    components: [ main, contrib, non-free ]
    keyring-file: kali-archive-keyring.gpg

  - description: "Preseed package configuration"
    action: run
    chroot: true
    script: scripts/preseed.sh

  - description: "Install standard packages"
    action: run
    chroot: true
    script: scripts/install-standard-packages.sh

  - description: "Set default locale {{ $locale }}"
    action: run
    chroot: true
    script: scripts/setup-locale.sh {{ $locale }}

  - description: "Set default timezone {{ $timezone }}"
    action: run
    chroot: true
    script: scripts/setup-timezone.sh {{ $timezone }}

  - description: "Set hostname to {{ $hostname }}"
    action: run
    chroot: false
    command: echo {{ $hostname }} > $ROOTDIR/etc/hostname

  # Note: installing kali-desktop-core before kali-tools-top10 is needed
  # to make sure that firefox-esr is installed, otherwise chromium gets
  # pulled in via faraday -> python3-selenium -> chromium-driver, and then
  # firefox-esr is not installed as chromium satisfies www-browser.
  #
  # Oh well. Doing so leads to a failure installing kali-desktop-xfce,
  # and in particular libgarcon-common. Apparently a broken diversion.
  # The error is:
  #
  # ~~~~
  # Configuration file '/etc/xdg/menus/xfce-applications.menu.original'
  #  ==> Deleted (by you or by a script) since installation.
  #  ==> Package distributor has shipped an updated version.
  #    What would you like to do about it ?  Your options are:
  #     Y or I  : install the package maintainer's version
  #     N or O  : keep your currently-installed version
  #       D     : show the differences between the versions
  #       Z     : start a shell to examine the situation
  #  The default action is to keep your current version.
  # ~~~~
  #
  # So let's make sure to install kali-desktop-xfce at the same time
  # as kali-desktop-core.
  - description: "Install core and desktop {{ $desktop }}"
    action: apt
    recommends: true
    packages:
      #- kali-linux-core
      #- kali-desktop-core
      #- kali-desktop-{{ $desktop }}
      - kali-linux-core
  {{ if eq $desktop "headless" }}
      - kali-linux-headless
  {{ else }}
      - kali-desktop-{{ $desktop }}
  {{ end }}

  {{ if ne $toolset "none" }}
  - description: "Install tool selection: {{ $toolset }}"
    action: apt
    recommends: true
    packages:
      - kali-linux-{{ $toolset }}
      - kali-tools-top10
  {{ end }}

#  - action: run
#    description: "HACK - Make package list identical compared to current VM images"
#    chroot: true
#    script: scripts/hack-tidy-up-packages

  {{ if ne $packages "" }}
  - description: "Install extra packages: {{ $packages }}"
    action: apt
    recommends: true
    packages: [ {{ $packages }} ]
  {{ end }}

  - action: overlay
    source: overlays/loopback-interface

  - description: "Create user {{ $username }}"
    label: "create-user.sh {{ $username }} ****"
    action: run
    chroot: true
    script: scripts/create-user.sh {{ $username }} "{{ $password }}"

  - description: "Disable tmpfiles.d/systemd-resolve.conf, cf. #1007018"
    action: run
    chroot: false
    command: ln -s /dev/null $ROOTDIR/etc/tmpfiles.d/systemd-resolve.conf

  - description: "Finish installation"
    action: run
    chroot: true
    script: scripts/finish-install.sh etc-hosts usergroups zsh

  - description: "Setup the disk image"
    action: image-partition
    imagename: {{ $imagename }}.raw
    imagesize: {{ $size }}
    partitiontype: msdos
    partitions:
      - name: root
        fs: ext4
        start: 2048s
        end: 100%
        flags: [ boot ]
    mountpoints:
      - mountpoint: /
        partition: root
        options: [ errors=remount-ro ]

  - action: run
    chroot: true
    command: partprobe

  - action: filesystem-deploy
    setup-kernel-cmdline: false

  - description: "Create a swap file"
    action: run
    chroot: true
    script: scripts/create-swapfile.sh

  - description: "Install the kernel & bootloader"
    action: apt
    recommends: true
    packages: [ grub-pc, linux-image-generic ]

  - description: "Setup GRUB"
    action: run
    chroot: true
    command: update-grub && grub-install "$IMAGE"

  - description: "Install virtualization support for {{ $variant }}"
    action: run
    chroot: true
    script: scripts/install-virt-support.sh {{ $variant }}

  {{ if eq $variant "vmware" }}
  - description: "Finish install for {{ $variant }}"
    action: run
    chroot: true
    script: scripts/finish-install-vmware.sh
  {{ end }}

  - description: "Configure apt sources.list"
    action: run
    chroot: true
    script: scripts/finish-install.sh apt-sources usergroups

  - description: "Final cleanup (from within)"
    action: run
    chroot: true
    script: scripts/cleanup-in.sh

  - description: "Final cleanup (from outside)"
    action: run
    chroot: false
    script: scripts/cleanup-out.sh

  {{ if eq $zip "true" }}
  - description: "Fill unallocated blocks with zeroes"
    action: run
    chroot: false
    script: scripts/zerofree.sh $IMAGE-part1
  {{ end }}

  - description: "Export to a {{ $format }} image"
    label: "export-{{ $format }}"
    action: run
    postprocess: true
    script: scripts/export-{{ $format }}.sh {{ if eq $keep "true" }}-k{{ end }} {{ if eq $zip "true" }}-z{{ end }} {{ $imagename }}
